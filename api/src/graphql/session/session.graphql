"""
A session is used to identify the user. 
You need to create a single session so that the API knows who you are and what you want.
"""
type Session {
    # The uuid of the owner 
    ownerUuid: Uuid!

    # The owner of the token
    owner: Account!

    # The token of the session
    token: String

    # When the token will expire
    expireAt: Date
}

type Query {
    # Retrieves all sessions of the owner of the current token.
    sessions: [Session]

    # Returns the current session based on the current token.
    session: Session
}

type Mutation {
    # The user creates a session to which can be used as verification for all other operations.
    createSession(email: String!, password: String!): Session

    """
    The session will be destroyed and can no longer be used. 
    The return value will be true when sessions was destroyed.
    
    **NOTE:** You can destroy other sessions while using another token for verification.
    """
    destroySession(token: String!): Boolean

    # Extend the session of the given token
    extendSession(token: String!): Session
}
